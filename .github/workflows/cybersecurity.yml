permissions:
  contents: write

name: Node.js CI/CD and Activity Notifications

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master ]
  watch:
    types: [started]
  fork:
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * 0'  # Weekly health check on Sunday at midnight
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20.x'
  CACHE_NPM_DEPS: 'true'
  TELEGRAM_ENABLED: 'true'

jobs:
  # Health check job that runs on a schedule
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Run health checks
      run: |
        echo "Running weekly health check..."
        
        # Check for outdated dependencies
        echo "Checking for outdated dependencies..."
        npm outdated || true
        
        # Check for security vulnerabilities
        echo "Checking for security vulnerabilities..."
        npm audit || true
        
        # Check repository size
        echo "Checking repository size..."
        du -sh . || true
        
        # Check for large files
        echo "Checking for large files..."
        find . -type f -size +10M | grep -v "node_modules" || true
    
    - name: Send health check report
      run: |
        # Get outdated dependencies
        OUTDATED=$(npm outdated --json || echo '{}')
        
        # Get security audit
        AUDIT=$(npm audit --json || echo '{}')
        
        # Count issues and PRs
        OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=1" \
          | jq -r 'if type=="array" then .[0].number // 0 else 0 end')
        
        OPEN_PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&per_page=1" \
          | jq -r 'if type=="array" then .[0].number // 0 else 0 end')
        
        # Prepare message
        MESSAGE="🏥 *Weekly Health Check Report*
        
        📊 *Repository*: ${{ github.repository }}
        
        📦 *Dependencies Status*:
        $(echo $OUTDATED | jq -r 'if length > 0 then "⚠️ " + (length | tostring) + " outdated dependencies" else "✅ All dependencies up to date" end')
        
        🔒 *Security Status*:
        $(echo $AUDIT | jq -r 'if .metadata.vulnerabilities.total > 0 then "⚠️ " + (.metadata.vulnerabilities.total | tostring) + " security vulnerabilities found" else "✅ No security vulnerabilities" end')
        
        📝 *Repository Status*:
        - Open Issues: $OPEN_ISSUES
        - Open Pull Requests: $OPEN_PRS
        
        ⏱️ *Check Time*: $(date +'%Y-%m-%d %H:%M:%S')
        
        [View Repository](https://github.com/${{ github.repository }})"
        
        if [ "${{ env.TELEGRAM_ENABLED }}" == "true" ]; then
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown \
            -d disable_web_page_preview=true || echo "Failed to send Telegram notification"
        fi

  notify-activity:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' && github.event_name != 'pull_request' && github.event_name != 'schedule'
    
    steps:
    - name: Get current time
      id: current-time
      run: echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Get repository stats
      id: repo-stats
      run: |
        # Get repository stats
        REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}")
        
        STARS=$(echo $REPO_INFO | jq -r '.stargazers_count // "N/A"')
        FORKS=$(echo $REPO_INFO | jq -r '.forks_count // "N/A"')
        WATCHERS=$(echo $REPO_INFO | jq -r '.subscribers_count // "N/A"')
        
        echo "stars=$STARS" >> $GITHUB_OUTPUT
        echo "forks=$FORKS" >> $GITHUB_OUTPUT
        echo "watchers=$WATCHERS" >> $GITHUB_OUTPUT
    
    - name: Prepare notification message
      id: prepare-message
      run: |
        if [ "${{ github.event_name }}" == "watch" ]; then
          echo "message=⭐ *New Star Alert!*
          
          User *${{ github.actor }}* has starred the repository *${{ github.repository }}*!
          
          📊 *Repository Stats*:
          - Stars: ${{ steps.repo-stats.outputs.stars }}
          - Forks: ${{ steps.repo-stats.outputs.forks }}
          - Watchers: ${{ steps.repo-stats.outputs.watchers }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Repository](https://github.com/${{ github.repository }})" >> $GITHUB_OUTPUT
        
        elif [ "${{ github.event_name }}" == "fork" ]; then
          echo "message=🍴 *New Fork Alert!*
          
          User *${{ github.actor }}* has forked the repository *${{ github.repository }}*!
          
          📊 *Repository Stats*:
          - Stars: ${{ steps.repo-stats.outputs.stars }}
          - Forks: ${{ steps.repo-stats.outputs.forks }}
          - Watchers: ${{ steps.repo-stats.outputs.watchers }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Fork](https://github.com/${{ github.actor }}/${{ github.repository.name || github.event.repository.name }})" >> $GITHUB_OUTPUT
        
        elif [ "${{ github.event_name }}" == "issues" ]; then
          # Get user info
          USER_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.actor }}")
          
          USER_TYPE=$(echo $USER_INFO | jq -r '.type // "User"')
          USER_CREATED=$(echo $USER_INFO | jq -r '.created_at // "N/A"')
          
          # Calculate user account age
          if [ "$USER_CREATED" != "N/A" ]; then
            CREATED_DATE=$(date -d "$USER_CREATED" +%s)
            CURRENT_DATE=$(date +%s)
            DAYS_OLD=$(( ($CURRENT_DATE - $CREATED_DATE) / 86400 ))
            USER_AGE="$DAYS_OLD days old"
          else
            USER_AGE="N/A"
          fi
          
          echo "message=🔍 *Issue ${{ github.event.action }} Alert!*
          
          User *${{ github.actor }}* has ${{ github.event.action }} an issue in *${{ github.repository }}*!
          
          📝 *Issue Title*: ${{ github.event.issue.title }}
          🔢 *Issue Number*: #${{ github.event.issue.number }}
          
          👤 *User Info*:
          - Type: $USER_TYPE
          - Account Age: $USER_AGE
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Issue](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }})" >> $GITHUB_OUTPUT
        
        elif [ "${{ github.event_name }}" == "issue_comment" ]; then
          echo "message=💬 *New Comment Alert!*
          
          User *${{ github.actor }}* has commented on an issue in *${{ github.repository }}*!
          
          📝 *Issue Title*: ${{ github.event.issue.title }}
          🔢 *Issue Number*: #${{ github.event.issue.number }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Comment](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}#issuecomment-${{ github.event.comment.id }})" >> $GITHUB_OUTPUT
        
        elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
          echo "message=👀 *Pull Request Review Alert!*
          
          User *${{ github.actor }}* has reviewed a pull request in *${{ github.repository }}*!
          
          📝 *PR Title*: ${{ github.event.pull_request.title }}
          🔢 *PR Number*: #${{ github.event.pull_request.number }}
          ✅ *Review State*: ${{ github.event.review.state }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Review](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}#pullrequestreview-${{ github.event.review.id }})" >> $GITHUB_OUTPUT
        
        elif [ "${{ github.event_name }}" == "release" ]; then
          echo "message=🚀 *New Release Alert!*
          
          A new release has been published in *${{ github.repository }}*!
          
          📝 *Release Name*: ${{ github.event.release.name }}
          🏷️ *Tag*: ${{ github.event.release.tag_name }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.release.tag_name }})" >> $GITHUB_OUTPUT
        
        else
          echo "message=🔔 *Repository Activity Alert!*
          
          There was activity in the repository *${{ github.repository }}* by *${{ github.actor }}*!
          
          📝 *Event Type*: ${{ github.event_name }}
          
          ⏱️ *Time*: ${{ steps.current-time.outputs.time }}
          
          [View Repository](https://github.com/${{ github.repository }})" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Telegram notification
      if: env.TELEGRAM_ENABLED == 'true'
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="${{ steps.prepare-message.outputs.message }}" \
          -d parse_mode=Markdown \
          -d disable_web_page_preview=true || echo "Failed to send Telegram notification"

  build-and-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: ${{ env.CACHE_NPM_DEPS == 'true' && 'npm' || '' }}
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Check package.json scripts
      id: check-scripts
      run: |
        if grep -q '"build"' package.json; then
          echo "has_build=true" >> $GITHUB_OUTPUT
        else
          echo "has_build=false" >> $GITHUB_OUTPUT
        fi
        
        if grep -q '"lint"' package.json; then
          echo "has_lint=true" >> $GITHUB_OUTPUT
        else
          echo "has_lint=false" >> $GITHUB_OUTPUT
        fi
        
        if grep -q '"test"' package.json; then
          echo "has_test=true" >> $GITHUB_OUTPUT
        else
          echo "has_test=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run linter
      if: steps.check-scripts.outputs.has_lint == 'true'
      run: npm run lint || echo "Linting error ignored"
      continue-on-error: true
    - 
      name: Copy ESLint Config
      run: cp eslint.config.js ~/.eslint.config.js
    -
      name: Run tests
      if: steps.check-scripts.outputs.has_test == 'true'
      run: npm test
      continue-on-error: true
    
    - name: Build project
      if: steps.check-scripts.outputs.has_build == 'true'
      run: npm run build
    
    - name: Skip build (no build script)
      if: steps.check-scripts.outputs.has_build == 'false'
      run: echo "No build script found in package.json, skipping build step"
    
    - name: Check for code quality issues
      run: |
        echo "Checking for code quality issues..."
        
        # Check for console.log statements
        CONSOLE_LOGS=$(grep -r "console.log" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v "node_modules" || echo "")
        if [ ! -z "$CONSOLE_LOGS" ]; then
          echo "⚠️ Found console.log statements that might need to be removed:"
          echo "$CONSOLE_LOGS"
        fi
        
        # Check for TODO comments
        TODOS=$(grep -r "TODO" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v "node_modules" || echo "")
        if [ ! -z "$TODOS" ]; then
          echo "⚠️ Found TODO comments that might need attention:"
          echo "$TODOS"
        fi
        
        # Check for large files
        LARGE_FILES=$(find . -type f -size +1M | grep -v "node_modules" || echo "")
        if [ ! -z "$LARGE_FILES" ]; then
          echo "⚠️ Found large files that might impact performance:"
          echo "$LARGE_FILES"
        fi
    
    - name: Generate code stats
      id: code-stats
      run: |
        # Count lines of code
        JS_LINES=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" | xargs cat | wc -l || echo "0")
        CSS_LINES=$(find . -name "*.css" -o -name "*.scss" -o -name "*.sass" | xargs cat | wc -l || echo "0")
        HTML_LINES=$(find . -name "*.html" | xargs cat | wc -l || echo "0")
        TOTAL_LINES=$((JS_LINES + CSS_LINES + HTML_LINES))
        
        echo "js_lines=$JS_LINES" >> $GITHUB_OUTPUT
        echo "css_lines=$CSS_LINES" >> $GITHUB_OUTPUT
        echo "html_lines=$HTML_LINES" >> $GITHUB_OUTPUT
        echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
    
    - name: Get current time
      id: current-time
      run: echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Send Telegram notification for build status
      if: env.TELEGRAM_ENABLED == 'true'
      run: |
        # Get commit message
        COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
        
        # Get commit author details
        AUTHOR_NAME=$(git log -1 --pretty=format:%an)
        AUTHOR_EMAIL=$(git log -1 --pretty=format:%ae)
        
        # Get changed files
        CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | tr '\n' ', ' | sed 's/,$//')
        
        # Prepare message
        MESSAGE="*Build Status Notification*
        
        📊 *Repository*: ${{ github.repository }}
        🔄 *Branch*: ${{ github.ref_name }}
        👤 *Commit by*: $AUTHOR_NAME ($AUTHOR_EMAIL)
        📝 *Commit message*: ${COMMIT_MESSAGE}
        
        📂 *Changed Files*: ${CHANGED_FILES}
        
        📊 *Code Stats*:
        - JavaScript/TypeScript: ${{ steps.code-stats.outputs.js_lines }} lines
        - CSS: ${{ steps.code-stats.outputs.css_lines }} lines
        - HTML: ${{ steps.code-stats.outputs.html_lines }} lines
        - Total: ${{ steps.code-stats.outputs.total_lines }} lines
        
        🏗️ *Build Status*: ${{ job.status }}
        ⏱️ *Completed at*: ${{ steps.current-time.outputs.time }}
        
        [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="$MESSAGE" \
          -d parse_mode=Markdown \
          -d disable_web_page_preview=true || echo "Failed to send Telegram notification"

  auto-fix-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Auto-fix linting issues
      run: |
        if grep -q '"lint:fix"' package.json; then
          echo "Running lint:fix script..."
          npm run lint:fix || echo "Lint fix failed or encountered issues"
        elif grep -q '"lint"' package.json; then
          echo "No lint:fix script found, checking for eslint..."
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f ".eslintrc.yml" ] || [ -f ".eslintrc" ]; then
            echo "ESLint config found, attempting to run eslint --fix..."
            npx eslint --fix . || echo "ESLint fix failed or encountered issues"
          else
            echo "No ESLint config found, skipping auto-fix"
          fi
        else
          echo "No lint script found, skipping auto-fix"
        fi
    
    - name: Auto-fix formatting issues
      run: |
        if grep -q '"format"' package.json; then
          echo "Running format script..."
          npm run format || echo "Format failed or encountered issues"
        elif [ -f ".prettierrc.js" ] || [ -f ".prettierrc.json" ] || [ -f ".prettierrc.yml" ] || [ -f ".prettierrc" ]; then
          echo "Prettier config found, attempting to run prettier --write..."
          npx prettier --write . || echo "Prettier fix failed or encountered issues"
        else
          echo "No Prettier config found, skipping auto-format"
        fi
    
    - name: Check for changes
      id: check-changes
      run: |
        git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT
    
    - name: Commit and push auto-fixed issues
      if: steps.check-changes.outputs.changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add .
        git commit -m "🤖 Auto-fix code style issues"
        git push origin HEAD:${{ github.ref_name }}

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: ${{ env.CACHE_NPM_DEPS == 'true' && 'npm' || '' }}
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Check for build script
      id: check-build-script
      run: |
        if grep -q '"build"' package.json; then
          echo "has_build=true" >> $GITHUB_OUTPUT
        else
          echo "has_build=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build project
      if: steps.check-build-script.outputs.has_build == 'true'
      run: npm run build
    
    - name: Skip build (no build script)
      if: steps.check-build-script.outputs.has_build == 'false'
      run: echo "No build script found in package.json, skipping build step"
    
    - name: Create deployment tag
      id: create-tag
      run: |
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        TAG_NAME="deploy-$TIMESTAMP"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git tag -a "$TAG_NAME" -m "Deployment on $(date +'%Y-%m-%d %H:%M:%S')"
        git push origin "$TAG_NAME"
    
    - name: Get current time
      id: current-time
      run: echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # For example: npx vercel --prod
    
    - name: Send Telegram notification for deployment
      if: env.TELEGRAM_ENABLED == 'true'
      run: |
        # Get recent commits
        RECENT_COMMITS=$(git log -3 --pretty=format:"• %s (%an)" | tr '\n' '\n')
        
        MESSAGE="*Deployment Notification*
        
        📊 *Repository*: ${{ github.repository }}
        🔄 *Branch*: ${{ github.ref_name }}
        👤 *Deployed by*: ${{ github.actor }}
        🏷️ *Deployment Tag*: ${{ steps.create-tag.outputs.tag_name }}
        
        📝 *Recent Commits*:
        $RECENT_COMMITS
        
        🚀 *Deployment Status*: ${{ job.status }}
        🌐 *Environment*: Production
        ⏱️ *Deployment Time*: ${{ steps.current-time.outputs.time }}
        
        [View Deployment Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="$MESSAGE" \
          -d parse_mode=Markdown \
          -d disable_web_page_preview=true || echo "Failed to send Telegram notification"

  fork-sync:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs, 'fork_sync') && github.event.inputs.fork_sync == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if repository is a fork
      id: check-fork
      run: |
        REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}")
        
        IS_FORK=$(echo $REPO_INFO | jq -r '.fork // false')
        
        if [ "$IS_FORK" == "true" ]; then
          PARENT_REPO=$(echo $REPO_INFO | jq -r '.parent.full_name')
          echo "is_fork=true" >> $GITHUB_OUTPUT
          echo "parent_repo=$PARENT_REPO" >> $GITHUB_OUTPUT
        else
          echo "is_fork=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Sync fork with upstream
      if: steps.check-fork.outputs.is_fork == 'true'
      run: |
        echo "Syncing fork with upstream repository: ${{ steps.check-fork.outputs.parent_repo }}..."
        
        git remote add upstream https://github.com/${{ steps.check-fork.outputs.parent_repo }}.git
        git fetch upstream
        
        # Get current branch
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # Try to merge upstream changes
        if git merge upstream/$CURRENT_BRANCH; then
          echo "Successfully merged upstream changes"
          git push origin $CURRENT_BRANCH
        else
          echo "Merge conflict detected, trying to resolve automatically..."
          git merge --abort
          
          # Try to rebase instead
          if git rebase upstream/$CURRENT_BRANCH; then
            echo "Successfully rebased with upstream changes"
            git push origin $CURRENT_BRANCH --force
          else
            echo "Could not automatically sync fork. Manual intervention required."
            git rebase --abort
          fi
        fi
    
    - name: Send Telegram notification for fork sync
      if: steps.check-fork.outputs.is_fork == 'true' && env.TELEGRAM_ENABLED == 'true'
      run: |
        MESSAGE="🔄 *Fork Sync Notification*
        
        Repository *${{ github.repository }}* has been synced with upstream repository *${{ steps.check-fork.outputs.parent_repo }}*!
        
        👤 *Triggered by*: ${{ github.actor }}
        ⏱️ *Sync Time*: $(date +'%Y-%m-%d %H:%M:%S')
        
        [View Repository](https://github.com/${{ github.repository }})"
        
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d text="$MESSAGE" \
          -d parse_mode=Markdown \
          -d disable_web_page_preview=true || echo "Failed to send Telegram notification"
